# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: Build .NET Fund Application API

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    runs-on: windows-latest

    env:
      Configuration: Release
      Base64_Encoded_Pfx: ${{ secrets.Base64_Encoded_Pfx }}
      Pfx_Password: ${{ secrets.Pfx_Password }}

    steps:
      # Checkout repo
      - name: Checkout repository
        uses: actions/checkout@v4

      # Setup .NET SDK
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      # Restore dependencies
      - name: Restore dependencies
        run: dotnet restore

      # Build project
      - name: Build solution
        run: dotnet build --no-restore --configuration $Env:Configuration

      # Run tests
      - name: Run tests
        run: dotnet test --no-build --verbosity normal

      # Optional – Decode certificate if secrets are set
      - name: Decode and import PFX certificate (optional)
        if: env.Base64_Encoded_Pfx != '' && env.Pfx_Password != ''
        shell: pwsh
        run: |
          Write-Host "PFX secret detected — decoding certificate..."
          [IO.File]::WriteAllBytes("cert.pfx", [Convert]::FromBase64String($Env:Base64_Encoded_Pfx))
          Write-Host "Certificate decoded successfully."

      # Optional – Sign the binaries
      - name: Sign binaries (optional)
        if: env.Base64_Encoded_Pfx != '' && env.Pfx_Password != ''
        shell: pwsh
        run: |
          Write-Host "Signing assemblies..."
          $exeFiles = Get-ChildItem -Path "." -Recurse -Include *.exe, *.dll
          foreach ($file in $exeFiles) {
              & "C:\Program Files (x86)\Windows Kits\10\bin\x64\signtool.exe" sign `
                /f cert.pfx `
                /p $Env:Pfx_Password `
                /tr http://timestamp.digicert.com `
                /td sha256 `
                /fd sha256 `
                "$($file.FullName)"
          }
          Write-Host "Signing completed."

      # Publish app (optional)
      - name: Publish app
        run: dotnet publish --configuration $Env:Configuration --output ./publish

      # Upload build artifacts
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: dotnet-desktop-build
          path: ./publish
